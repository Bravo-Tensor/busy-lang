/**
 * HTML Reporter
 * Rich HTML report with interactive features
 */

import type { Reporter, CompilationResult } from '../types';
import { writeFile } from 'fs/promises';

/**
 * HTML reporter class
 */
export class HtmlReporter implements Reporter {
  
  /**
   * Generate HTML report
   */
  async generate(result: CompilationResult, outputPath?: string): Promise<void> {
    const html = this.buildHtmlReport(result);
    const output = outputPath || 'busy-report.html';
    
    await writeFile(output, html, 'utf8');
    console.log(`HTML report written to: ${output}`);
  }
  
  /**
   * Build HTML report
   */
  private buildHtmlReport(result: CompilationResult): string {
    const summary = result.summary;
    const status = summary.success ? 'success' : 'error';
    const timestamp = new Date().toISOString();
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BUSY Validation Report</title>
    <style>
        ${this.getStyles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>üîç BUSY Validation Report</h1>
            <div class="status status-${status}">
                ${summary.success ? '‚úÖ Validation Passed' : '‚ùå Validation Failed'}
            </div>
            <div class="timestamp">Generated: ${timestamp}</div>
        </header>

        <div class="summary-cards">
            <div class="card">
                <h3>Files</h3>
                <div class="metric">${summary.totalFiles}</div>
                <div class="subtext">Total files</div>
            </div>
            <div class="card">
                <h3>Parsed</h3>
                <div class="metric">${summary.successfullyParsed}</div>
                <div class="subtext">Successfully parsed</div>
            </div>
            <div class="card ${summary.errors > 0 ? 'card-error' : ''}">
                <h3>Errors</h3>
                <div class="metric">${summary.errors}</div>
                <div class="subtext">Critical issues</div>
            </div>
            <div class="card ${summary.warnings > 0 ? 'card-warning' : ''}">
                <h3>Warnings</h3>
                <div class="metric">${summary.warnings}</div>
                <div class="subtext">Potential issues</div>
            </div>
            <div class="card">
                <h3>Duration</h3>
                <div class="metric">${summary.duration}ms</div>
                <div class="subtext">Analysis time</div>
            </div>
        </div>

        ${this.buildScanSection(result)}
        ${this.buildParseSection(result)}
        ${this.buildBuildSection(result)}
        ${this.buildAnalysisSection(result)}
        
        <footer class="footer">
            <p>Generated by BUSY Compiler v0.1.0</p>
        </footer>
    </div>

    <script>
        ${this.getScripts()}
    </script>
</body>
</html>`;
  }
  
  /**
   * Build scan results section
   */
  private buildScanSection(result: CompilationResult): string {
    const scan = result.scanResult;
    
    return `
        <section class="section">
            <h2>üìÅ File Discovery</h2>
            <div class="stats-grid">
                <div class="stat">
                    <label>Total Files:</label>
                    <span>${scan.stats.totalFiles}</span>
                </div>
                <div class="stat">
                    <label>Teams:</label>
                    <span>L0(${scan.stats.teamsL0}) L1(${scan.stats.teamsL1}) L2(${scan.stats.teamsL2})</span>
                </div>
                <div class="stat">
                    <label>Roles:</label>
                    <span>${scan.stats.roleFiles}</span>
                </div>
                <div class="stat">
                    <label>Playbooks:</label>
                    <span>${scan.stats.playbookFiles}</span>
                </div>
                <div class="stat">
                    <label>Team Files:</label>
                    <span>${scan.stats.teamFiles}</span>
                </div>
                <div class="stat">
                    <label>Invalid Files:</label>
                    <span class="${scan.stats.invalidFiles > 0 ? 'error' : ''}">${scan.stats.invalidFiles}</span>
                </div>
            </div>
            
            ${scan.structureValidation.errors.length > 0 || scan.structureValidation.warnings.length > 0 ? `
            <div class="issues">
                <h3>Structure Issues</h3>
                ${scan.structureValidation.errors.map(error => `
                    <div class="issue issue-error">‚ùå ${error}</div>
                `).join('')}
                ${scan.structureValidation.warnings.map(warning => `
                    <div class="issue issue-warning">‚ö†Ô∏è ${warning}</div>
                `).join('')}
            </div>
            ` : ''}
        </section>
    `;
  }
  
  /**
   * Build parse results section
   */
  private buildParseSection(result: CompilationResult): string {
    const parse = result.parseResult;
    
    return `
        <section class="section">
            <h2>üìù YAML Parsing</h2>
            <div class="stats-grid">
                <div class="stat">
                    <label>Success Rate:</label>
                    <span>${parse.stats.successfullyParsed}/${parse.stats.totalFiles}</span>
                </div>
                <div class="stat">
                    <label>Parse Errors:</label>
                    <span class="${parse.parseErrors.length > 0 ? 'error' : ''}">${parse.parseErrors.length}</span>
                </div>
                <div class="stat">
                    <label>Validation Errors:</label>
                    <span class="${parse.validationResults.filter(r => !r.isValid).length > 0 ? 'error' : ''}">${parse.validationResults.filter(r => !r.isValid).length}</span>
                </div>
            </div>
            
            ${parse.parseErrors.length > 0 ? `
            <div class="issues">
                <h3>Parse Errors</h3>
                ${parse.parseErrors.slice(0, 10).map(error => `
                    <div class="issue issue-error">
                        <div class="issue-header">‚ùå ${error.filePath}${error.line ? ':' + error.line : ''}</div>
                        <div class="issue-message">${error.error.message}</div>
                    </div>
                `).join('')}
                ${parse.parseErrors.length > 10 ? `
                    <div class="more-issues">... and ${parse.parseErrors.length - 10} more errors</div>
                ` : ''}
            </div>
            ` : ''}
        </section>
    `;
  }
  
  /**
   * Build AST build section
   */
  private buildBuildSection(result: CompilationResult): string {
    const build = result.buildResult;
    
    return `
        <section class="section">
            <h2>üå≤ AST Construction</h2>
            <div class="stats-grid">
                <div class="stat">
                    <label>AST Nodes:</label>
                    <span>${build.stats.nodesCreated}</span>
                </div>
                <div class="stat">
                    <label>Symbols:</label>
                    <span>${build.stats.symbolsCreated}</span>
                </div>
                <div class="stat">
                    <label>Dependencies:</label>
                    <span>${build.stats.dependenciesCreated}</span>
                </div>
                <div class="stat">
                    <label>Build Errors:</label>
                    <span class="${build.errors.length > 0 ? 'error' : ''}">${build.errors.length}</span>
                </div>
                <div class="stat">
                    <label>Build Warnings:</label>
                    <span class="${build.warnings.length > 0 ? 'warning' : ''}">${build.warnings.length}</span>
                </div>
            </div>
            
            ${build.errors.length > 0 || build.warnings.length > 0 ? `
            <div class="issues">
                <h3>Build Issues</h3>
                ${build.errors.map(error => `
                    <div class="issue issue-error">
                        <div class="issue-header">‚ùå ${error.message}</div>
                        ${error.file ? `<div class="issue-file">File: ${error.file}</div>` : ''}
                    </div>
                `).join('')}
                ${build.warnings.map(warning => `
                    <div class="issue issue-warning">
                        <div class="issue-header">‚ö†Ô∏è ${warning.message}</div>
                        ${warning.file ? `<div class="issue-file">File: ${warning.file}</div>` : ''}
                    </div>
                `).join('')}
            </div>
            ` : ''}
        </section>
    `;
  }
  
  /**
   * Build analysis section
   */
  private buildAnalysisSection(result: CompilationResult): string {
    if (result.analysisResults.length === 0) {
      return '<section class="section"><h2>üîç Static Analysis</h2><p>No analysis rules executed.</p></section>';
    }
    
    const allIssues = result.analysisResults.flatMap(a => a.issues);
    const errors = allIssues.filter(i => i.severity === 'error');
    const warnings = allIssues.filter(i => i.severity === 'warning');
    const info = allIssues.filter(i => i.severity === 'info');
    
    return `
        <section class="section">
            <h2>üîç Static Analysis</h2>
            <div class="stats-grid">
                <div class="stat">
                    <label>Rules Executed:</label>
                    <span>${result.analysisResults.length}</span>
                </div>
                <div class="stat">
                    <label>Errors:</label>
                    <span class="${errors.length > 0 ? 'error' : ''}">${errors.length}</span>
                </div>
                <div class="stat">
                    <label>Warnings:</label>
                    <span class="${warnings.length > 0 ? 'warning' : ''}">${warnings.length}</span>
                </div>
                <div class="stat">
                    <label>Info:</label>
                    <span>${info.length}</span>
                </div>
            </div>
            
            ${allIssues.length > 0 ? `
            <div class="issues">
                <h3>Analysis Issues</h3>
                ${allIssues.slice(0, 20).map(issue => `
                    <div class="issue issue-${issue.severity}">
                        <div class="issue-header">
                            ${issue.severity === 'error' ? '‚ùå' : issue.severity === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}
                            ${issue.code}: ${issue.message}
                        </div>
                        <div class="issue-file">${issue.file}${issue.line ? ':' + issue.line : ''}</div>
                        ${issue.suggestion ? `<div class="issue-suggestion">üí° ${issue.suggestion}</div>` : ''}
                    </div>
                `).join('')}
                ${allIssues.length > 20 ? `
                    <div class="more-issues">... and ${allIssues.length - 20} more issues</div>
                ` : ''}
            </div>
            ` : ''}
        </section>
    `;
  }
  
  /**
   * Get CSS styles
   */
  private getStyles(): string {
    return `
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #333; margin-bottom: 10px; }
        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; margin-bottom: 10px; }
        .status-success { background: #d4edda; color: #155724; }
        .status-error { background: #f8d7da; color: #721c24; }
        .timestamp { color: #666; font-size: 14px; }
        .summary-cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }
        .card-error { border-left: 4px solid #dc3545; }
        .card-warning { border-left: 4px solid #ffc107; }
        .card h3 { color: #666; font-size: 14px; margin-bottom: 8px; }
        .metric { font-size: 32px; font-weight: bold; color: #333; }
        .subtext { color: #666; font-size: 12px; margin-top: 4px; }
        .section { background: white; margin-bottom: 20px; padding: 24px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .section h2 { color: #333; margin-bottom: 20px; border-bottom: 2px solid #eee; padding-bottom: 10px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin-bottom: 20px; }
        .stat { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #eee; }
        .stat label { font-weight: 500; color: #555; }
        .stat span { color: #333; }
        .stat .error { color: #dc3545; font-weight: bold; }
        .stat .warning { color: #ffc107; font-weight: bold; }
        .issues { margin-top: 20px; }
        .issues h3 { color: #333; margin-bottom: 12px; }
        .issue { margin-bottom: 12px; padding: 12px; border-radius: 4px; border-left: 4px solid #ccc; }
        .issue-error { background: #fef5e7; border-left-color: #dc3545; }
        .issue-warning { background: #fff3cd; border-left-color: #ffc107; }
        .issue-info { background: #e7f3ff; border-left-color: #007bff; }
        .issue-header { font-weight: 500; margin-bottom: 4px; }
        .issue-file { font-size: 12px; color: #666; margin-bottom: 4px; }
        .issue-message { font-size: 14px; color: #333; margin-bottom: 4px; }
        .issue-suggestion { font-size: 12px; color: #0066cc; font-style: italic; }
        .more-issues { text-align: center; color: #666; font-style: italic; margin-top: 12px; }
        .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
    `;
  }
  
  /**
   * Get JavaScript for interactivity
   */
  private getScripts(): string {
    return `
        // Add collapsible sections
        document.querySelectorAll('.section h2').forEach(header => {
            header.style.cursor = 'pointer';
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                content.style.display = content.style.display === 'none' ? 'block' : 'none';
            });
        });
        
        // Add filter functionality for issues
        if (document.querySelector('.issues')) {
            const filterButtons = document.createElement('div');
            filterButtons.innerHTML = \`
                <button onclick="filterIssues('all')">All</button>
                <button onclick="filterIssues('error')">Errors</button>
                <button onclick="filterIssues('warning')">Warnings</button>
                <button onclick="filterIssues('info')">Info</button>
            \`;
            filterButtons.style.marginBottom = '10px';
            document.querySelector('.issues').prepend(filterButtons);
        }
        
        function filterIssues(type) {
            document.querySelectorAll('.issue').forEach(issue => {
                if (type === 'all' || issue.classList.contains('issue-' + type)) {
                    issue.style.display = 'block';
                } else {
                    issue.style.display = 'none';
                }
            });
        }
    `;
  }
}