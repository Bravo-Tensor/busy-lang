
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Meta models (BUSY definitions)
model Team {
  id           Int      @id @default(autoincrement())
  name         String
  type         String
  description  String?
  layer        String
  configJson   String?  @map("config_json")
  busyFilePath String?  @map("busy_file_path")
  createdAt    DateTime @default(now()) @map("created_at")

  roles                Role[]
  playbooks           Playbook[]
  playbookInstances   PlaybookInstance[]

  @@map("teams")
}

model Role {
  id             Int      @id @default(autoincrement())
  teamId         Int      @map("team_id")
  name           String
  description    String?
  inheritsFromId Int?     @map("inherits_from_id")
  configJson     String?  @map("config_json")
  busyFilePath   String?  @map("busy_file_path")
  createdAt      DateTime @default(now()) @map("created_at")

  team           Team      @relation(fields: [teamId], references: [id])
  inheritsFrom   Role?     @relation("RoleInheritance", fields: [inheritsFromId], references: [id])
  children       Role[]    @relation("RoleInheritance")
  tasks          Task[]
  taskInstances  TaskInstance[]

  @@map("roles")
}

model Playbook {
  id            Int      @id @default(autoincrement())
  teamId        Int      @map("team_id")
  name          String
  description   String?
  cadenceConfig String?  @map("cadence_config")
  configJson    String?  @map("config_json")
  busyFilePath  String?  @map("busy_file_path")
  createdAt     DateTime @default(now()) @map("created_at")

  team      Team               @relation(fields: [teamId], references: [id])
  tasks     Task[]
  instances PlaybookInstance[]

  @@map("playbooks")
}

model Document {
  id           Int      @id @default(autoincrement())
  name         String
  contentType  String   @map("content_type")
  schemaJson   String?  @map("schema_json")
  busyFilePath String?  @map("busy_file_path")
  createdAt    DateTime @default(now()) @map("created_at")

  instances DocumentInstance[]

  @@map("documents")
}

model Task {
  id                Int      @id @default(autoincrement())
  playbookId        Int      @map("playbook_id")
  roleId            Int?     @map("role_id")
  name              String
  description       String?
  executionType     String   @map("execution_type")
  estimatedDuration String?  @map("estimated_duration")
  configJson        String?  @map("config_json")
  orderIndex        Int      @map("order_index")
  createdAt         DateTime @default(now()) @map("created_at")

  playbook  Playbook       @relation(fields: [playbookId], references: [id])
  role      Role?          @relation(fields: [roleId], references: [id])
  instances TaskInstance[]

  @@map("tasks")
}

model Import {
  id          Int      @id @default(autoincrement())
  entityType  String   @map("entity_type")
  entityId    Int      @map("entity_id")
  importType  String   @map("import_type")
  name        String
  capability  String
  configJson  String?  @map("config_json")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("imports")
}

// Runtime models (process instances)
model PlaybookInstance {
  id               Int       @id @default(autoincrement())
  playbookId       Int       @map("playbook_id")
  status           String    @default("started")
  clientName       String?   @map("client_name")
  clientFolderPath String?   @map("client_folder_path")
  currentStep      Int       @default(0) @map("current_step")
  dataJson         String?   @map("data_json")
  startedAt        DateTime  @default(now()) @map("started_at")
  completedAt      DateTime? @map("completed_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  playbook          Playbook           @relation(fields: [playbookId], references: [id])
  team              Team               @relation(fields: [playbookId], references: [id])
  taskInstances     TaskInstance[]
  documentInstances DocumentInstance[]
  stateTransitions  StateTransition[]

  @@map("playbook_instances")
}

model TaskInstance {
  id                   Int       @id @default(autoincrement())
  playbookInstanceId   Int       @map("playbook_instance_id")
  taskId               Int       @map("task_id")
  status               String    @default("pending")
  assignedRoleId       Int?      @map("assigned_role_id")
  inputDataJson        String?   @map("input_data_json")
  outputDataJson       String?   @map("output_data_json")
  notes                String?
  startedAt            DateTime? @map("started_at")
  completedAt          DateTime? @map("completed_at")
  createdAt            DateTime  @default(now()) @map("created_at")

  playbookInstance  PlaybookInstance   @relation(fields: [playbookInstanceId], references: [id])
  task              Task               @relation(fields: [taskId], references: [id])
  assignedRole      Role?              @relation(fields: [assignedRoleId], references: [id])
  documentInstances DocumentInstance[]
  stateTransitions  StateTransition[]

  @@map("task_instances")
}

model DocumentInstance {
  id                 Int      @id @default(autoincrement())
  documentId         Int      @map("document_id")
  playbookInstanceId Int?     @map("playbook_instance_id")
  taskInstanceId     Int?     @map("task_instance_id")
  filePath           String?  @map("file_path")
  dataJson           String?  @map("data_json")
  version            Int      @default(1)
  createdAt          DateTime @default(now()) @map("created_at")

  document         Document          @relation(fields: [documentId], references: [id])
  playbookInstance PlaybookInstance? @relation(fields: [playbookInstanceId], references: [id])
  taskInstance     TaskInstance?     @relation(fields: [taskInstanceId], references: [id])

  @@map("document_instances")
}

model StateTransition {
  id             Int      @id @default(autoincrement())
  instanceId     Int      @map("instance_id")
  instanceType   String   @map("instance_type")
  fromStatus     String?  @map("from_status")
  toStatus       String   @map("to_status")
  userId         String?  @map("user_id")
  notes          String?
  metadataJson   String?  @map("metadata_json")
  createdAt      DateTime @default(now()) @map("created_at")

  playbookInstance PlaybookInstance? @relation(fields: [instanceId], references: [id])
  taskInstance     TaskInstance?     @relation(fields: [instanceId], references: [id])

  @@map("state_transitions")
}
